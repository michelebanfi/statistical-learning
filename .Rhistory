lines(xGrid, preds)
splineFit2 = lm(df$y ~ ns(df$x, knots = c(7, 10)))
preds2 = predict(splineFit2, newdata = list(x = xGrid))
plot(df$x, df$y, cex = 1.5, pch = 19)
lines(xGrid, preds2)
aq = na.omit(airquality[,c("Ozone", "Temp", "Month", "Wind")])
aq = na.omit(airquality[,c("Ozone", "Temp", "Month", "Wind")])
plot(Ozone ~ Temp, data = aq)
plot(Ozone ~ Month, data = aq)
plot(Ozone ~ Wind, data = aq)
mod0 = lm(Ozone, ~ Temp, data = aq)
mod0 = lm(Ozone, ~ Temp, data = aq)
mod0 = lm(Ozone, ~ Temp, data = aq)
aq = na.omit(airquality[,c("Ozone", "Temp", "Month", "Wind")])
plot(Ozone ~ Temp, data = aq)
plot(Ozone ~ Month, data = aq)
plot(Ozone ~ Wind, data = aq)
mod0 = lm(Ozone, ~ Temp, data = aq)
mod0 = lm(Ozone ~ Temp, data = aq)
mod1 = lm(Ozone ~ Temp + I(Temp^2), data = aq)
beta0 = coef(mod0)
beta1 = coef(mod1)
plot(Ozone ~ Temp, data = aq)
curve(beta0[1] + beta0[2]*x, range(aq$Temp), add = T, col = 2, lwd = 2)
plot(Ozone ~ Temp, data = aq)
curve(beta0[1] + beta0[2]*x, range(aq$Temp), add = T, col = 2, lwd = 2)
curve(beta1[1] + beta1[2]*x + beta1[3]*x^2, range(aq$Temp), add = T, col = 3, lwd = 2)
mod3 = lm(Ozone ~ cut(Temp, c(0, 74, 90, max(Temp))), data = aq)
Temp = seq(min(aq$Temo), max(aq$Temp), length.out  = 100)
Temp = seq(min(aq$Temp), max(aq$Temp), length.out  = 100)
lines(Temp, predict(mod3, data.frame(cut(Temp, c(0, 74, 90, max(Temp))))), col = 3, lty = 2, lwd = 3)
plot(Ozone ~ Temp, data = aq)
curve(beta0[1] + beta0[2]*x, range(aq$Temp), add = T, col = 2, lwd = 2)
curve(beta1[1] + beta1[2]*x + beta1[3]*x^2, range(aq$Temp), add = T, col = 3, lwd = 2)
lines(Temp, predict(mod3, data.frame(cut(Temp, c(0, 74, 90, max(Temp))))), col = 3, lty = 2, lwd = 3)
lines(Temp, predict(mod3, data.frame(cut(Temp, c(0, 74, 90, max(Temp))))), col = 4, lty = 2, lwd = 3)
library(splines)
knts = c(74, 90)
mod4 = lm(Ozone ~ bs(Temp, degree = 1, knots = knts), data = aq)
summary(mod4)
lines(temp, predict(mod4, data.frame(Temp = temp)), col = 5, lty = 2, lwd = 2)
temp = seq(min(aq$Temp), max(aq$Temp), length.out = 100)
lines(temp, predict(mod4, data.frame(Temp = temp)), col = 5, lty = 2, lwd = 2)
abline(v = knts, col = "gray", lwd = 2)
mod5 = lm(Ozone ~ bs(Temp, degree = 3, knots = knts), data = aq)
lines(temp, predict(mod5, data.frame(Temp = temp)), col = 6, lty = 2, lwd = 2)
mod6 = lm(Ozone ~ ns(Temp, knots = knts), data = aq)
lines(temp, predict(mod6, data.frame(Temp = temp)), col = 7, lty = 2, lwd = 2)
### GAM
library(gam)
### GAM
install.packages("gam")
library(gam)
library(ISLR)
attach(Wage)
gam1 = gam(wage ~ s(age, df = 6) + s(year, df = 6) + education, data = Wage)
summary(gam1)
par(mfrow= c(1, 3))
plot(gam1)
plot(gam1, se = T)
logitGam1 = gam(I(wage > 250) ~ s(age, df = 4), + s(year, df = 4), + education)
logitGam1 = gam(I(wage > 250) ~ s(age, df = 4), + s(year, df = 4), + education, data = Wage, family = binomial)
logitGam1 = gam(I(wage > 250) ~ s(age, df = 4), + s(year, df = 4) + education, data = Wage, family = binomial)
logitGam1 = gam(I(wage > 250) ~ s(age, df = 4) + s(year, df = 4) + education, data = Wage, family = binomial)
plot(logitGam1)
plot(logitGam1, se = T)
logitGam1 = gam(I(wage > 250) ~ s(age, df = 4) + year + education, data = Wage, family = binomial)
logitGam1 = gam(I(wage > 250) ~ s(age, df = 4) + s(year, df = 4) + education, data = Wage, family = binomial)
plot(logitGam1, se = T)
logitGam2 = gam(I(wage > 250) ~ s(age, df = 4) + year + education, data = Wage, family = binomial)
plot(logitGam2, se = T)
anova(logitGam1,logitGam2 )
lm1 = lm(wage ~ ns(age, df = 4) + ns(year, df = 4) + education, data = Wage)
summary(lm1)
gam2 = gam(wage ~ s(year, 4) + s(age, 5) + education, data = Wage)
par(mfrow = c(1, 3))
plot(gam2, se = T)
plot.Gam(lm1, se = T)
gamOnYear = gam(wage, s(age, 5) + education, data = Wage)
gamOnYear = gam(wage ~ s(age, 5) + education, data = Wage)
gamLinearYear = gam(Wage ~ year + s(age, 5) + education, data = Wage)
gamLinearYear = gam(wage ~ year + s(age, 5) + education, data = Wage)
anova(gamOnYear, gamLinearYear)
anova(gamOnYear, gamLinearYear, gam2)
pisa = read.csv(url("https://raw.githubsercontent.com/m-clark/generalized-additive-models/master/data/pisasci2006.csv")
pisa = read.csv(url("https://raw.githubsercontent.com/m-clark/generalized-additive-models/master/data/pisasci2006.csv"))
library(ggplot2)
library(gridExtra)
plot1 = ggplot(pisa, aes(x = Overall, y = Edu, group = 1)) + geom_poin()
plot2 = ggplot(pisa, aes(x = Overall, y = Health, group = 1)) + geom_poin()
plot3 = ggplot(pisa, aes(x = Overall, y = Income, group = 1)) + geom_poin()
plot4 = ggplot(pisa, aes(x = Overall, y = Interest, group = 1)) + geom_poin()
plot5 = ggplot(pisa, aes(x = Overall, y = Support, group = 1)) + geom_poin()
plot5 = ggplot(pisa, aes(x = Overall, y = HDI, group = 1)) + geom_poin()
pisa = read.csv(url("https://raw.githubsercontent.com/m-clark/generalized-additive-models/master/data/pisasci2006.csv"))
pisa = read.csv(url("https://raw.githubusercontent.com/m-clark/generalized-additive-models/master/data/pisasci2006.csv"))
library(ggplot2)
library(gridExtra)
plot1 = ggplot(pisa, aes(x = Overall, y = Edu, group = 1)) + geom_poin()
plot2 = ggplot(pisa, aes(x = Overall, y = Health, group = 1)) + geom_poin()
plot3 = ggplot(pisa, aes(x = Overall, y = Income, group = 1)) + geom_poin()
plot4 = ggplot(pisa, aes(x = Overall, y = Interest, group = 1)) + geom_poin()
plot5 = ggplot(pisa, aes(x = Overall, y = Support, group = 1)) + geom_poin()
plot6 = ggplot(pisa, aes(x = Overall, y = HDI, group = 1)) + geom_poin()
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol = 3, nrow = 2)
plot1 = ggplot(pisa, aes(x = Overall, y = Edu, group = 1)) + geom_point()
plot2 = ggplot(pisa, aes(x = Overall, y = Health, group = 1)) + geom_point()
plot3 = ggplot(pisa, aes(x = Overall, y = Income, group = 1)) + geom_point()
plot4 = ggplot(pisa, aes(x = Overall, y = Interest, group = 1)) + geom_point()
plot5 = ggplot(pisa, aes(x = Overall, y = Support, group = 1)) + geom_point()
plot6 = ggplot(pisa, aes(x = Overall, y = HDI, group = 1)) + geom_point()
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol = 3, nrow = 2)
library(mgcv)
modLm = gam(Overall ~ Income, data = pisa)
summary(modLm)
modGam1 = gam(Overall ~ s(Income, bs = "cr"))
modGam1 = gam(Overall ~ s(Income, bs = "cr"), data = pisa)
summary(modGam1)
par(mfrow = c(1,1))
plot(modGam1)
AIC(modLm)
AIC(modGam1)
summary(modGam1)$sp.criterion
summary(modLm)$sp.criterion
summary(modLm)$r.sq
summary(modGam1)$r.sq
anova(modLm, modGam1, test = "Chisq")
modLm2 = gam(Overall ~ Income + Edu + Health, data = pisa)
library(ggeffects)
library(gratia)
modGam2 = gam(Overall ~ s(Income) + s(Edu) + s(Health), data = pisa)
summary(modGam2)
modGam3 = update(modGam2, .~. - s(Health) + Health)
summary(modGam3)
install.packages(ggeffects)
install.packages("ggeffects")
install.packages("gratia")
library(ggeffects)
library(gratia)
plot(ggeffects::ggpredict(modGam2), facets = T)
gratia::draw(modGam2)
anova(modLm2, modGam2, modGam3, test = "Chisq")
# MARS
library(rsample)
library(ggplot2)
library(earth)
library(caret)
library(vip)
library(pdp)
# MARS
install.packages("earth")
library(rsample)
library(ggplot2)
library(earth)
library(caret)
library(vip)
library(pdp)
install.packages("pdp")
library(rsample)
library(ggplot2)
library(earth)
library(caret)
library(vip)
library(pdp)
library(tidyverse)
set.seed(123)
amesSplit =  initial_split(AmesHousing::make_ames(), prop = 0.7, strata = "Sale_Price")
amesSplit =  initial_split(AmesHousing::make_ames(), prop = 0.7, strata = "Sale_Price")
library(rsample)
library(ggplot2)
library(earth)
library(caret)
library(vip)
library(pdp)
library(tidyverse)
set.seed(123)
amesSplit =  initial_split(AmesHousing::make_ames(), prop = 0.7, strata = "Sale_Price")
amesTrain = training(amesSplit)
amesTest = testing(amesSplit)
amesSplit = initial_split(AmesHousing::make_ames(), prop = .7, strata = "Sale_Price")
library(dplyr)
set.seed(123)
amesSplit = initial_split(AmesHousing::make_ames(), prop = .7, strata = "Sale_Price")
library(magrittr)
set.seed(123)
amesSplit = initial_split(AmesHousing::make_ames(), prop = .7, strata = "Sale_Price")
amesTrain = training(amesSplit)
amesTest = testing(amesSplit)
mars1 = earh(Sale_Price ~ ., data = amesTrain)
print(mars1)
set.seed(123)
amesSplit = initial_split(AmesHousing::make_ames(), prop = .7, strata = "Sale_Price")
amesTrain = training(amesSplit)
amesTest = testing(amesSplit)
mars1 = earh(Sale_Price ~ ., data = amesTrain)
print(mars1)
mars1 = earth(Sale_Price ~ ., data = amesTrain)
print(mars1)
summary(mars1) %>% .$coefficients
summary(mars1) %>% .$coefficients %>% head(10)
summary(mars1)$coefficients
plot(mars1, which = 1)
evimp(mars1)
plotmo(mars1)
hyperGrid = expand_grid(
degree = 1:3,
nprune = seq(2, 100, length.out = 10) %>% floor()
)
head(hyperGrid)
cvMars = train(
x = subset(amesTrain, select = - Sale_Price),
y = amesTrain$Sale_Price,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = hyperGrid
)
head(hyperGrid)
set.seed(123)
cvMars = train(
x = subset(amesTrain, select = - Sale_Price),
y = amesTrain$Sale_Price,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = hyperGrid
)
cv_mars <- train(
x=subset(ames_train, select=- Sale_Price),
y=ames_train$Sale_Price,
method="earth",
metric="RSME",
trControl = trainControl(method="cv", number=10),
tuneGrid = hyper_grid
)
cv_mars <- train(
x=subset(amesTrain, select=- Sale_Price),
y=amesTrain$Sale_Price,
method="earth",
metric="RSME",
trControl = trainControl(method="cv", number=10),
tuneGrid = hyper_grid
)
cv_mars <- train(
x=subset(amesTrain, select=- Sale_Price),
y=amesTrain$Sale_Price,
method="earth",
metric="RSME",
trControl = trainControl(method="cv", number=10),
tuneGrid = hyperGrid
)
install.packaes("heatmaply")
install.packages("heatmaply")
library(heatmaply)
heatmaply(airquality[1:30,],showticklabels = c(T,F))
heatmaply_na(airquality[1:30,],showticklabels = c(T,F))
mtcars.missing = mtcars
mtcars.missing[sample(1:nrow(mtcars), 5), sample(1:ncol(mtc))]  = NA
mtcars.missing[sample(1:nrow(mtcars), 5), sample(1:ncol(mtcars))]  = NA
superheat(mtcars.missing. scale = T)
superheat(mtcars.missing, scale = T)
install.packages("heatmaply")
install.packages("heatmaply")
library(heatmaply)
heatmaply_na(airquality[1:30,],showticklabels = c(T,F))
mtcars.missing = mtcars
mtcars.missing[sample(1:nrow(mtcars), 5), sample(1:ncol(mtcars))]  = NA
superheat(mtcars.missing, scale = T)
install.packages("superheat")
library(superheat)
superheat(mtcars.missing, scale = T)
superheat(mtcars.missing, scale = T, heat.na.col = "white")
superheat(mtcars.missing, scale = T, heat.na.col = "white")
superheat(mtcars.missing, scale = T, heat.na.col = "white")
mtcars.missing[sample(1:nrow(mtcars), 5), sample(1:ncol(mtcars))]  = NA
library(heatmaply)
library(superheat)
heatmaply_na(airquality[1:30,],showticklabels = c(T,F))
mtcars.missing = mtcars
mtcars.missing[sample(1:nrow(mtcars), 5), sample(1:ncol(mtcars))]  = NA
superheat(mtcars.missing, scale = T, heat.na.col = "white")
superheat(mtcars.missing, scale = T, heat.na.col = "red")
install.packages("naniar")
library(naniar)
vis_miss(airquality)
library(heatmaply)
library(superheat)
library(naniar)
heatmaply_na(airquality[1:30,],showticklabels = c(T,F))
mtcars.missing = mtcars
mtcars.missing[sample(1:nrow(mtcars), 5), sample(1:ncol(mtcars))]  = NA
# non funziona questo... neach la ari sa perché
superheat(mtcars.missing, scale = T, heat.na.col = "red")
vis_miss(airquality)
gg_miss_upset(airquality)
# non funziona questo... neach la ari sa perché
superheat(mtcars.missing, scale = T, heat.na.col = "red")
library(heatmaply)
library(superheat)
library(naniar)
heatmaply_na(airquality[1:30,],showticklabels = c(T,F))
mtcars.missing = mtcars
mtcars.missing[sample(1:nrow(mtcars), 5), sample(1:ncol(mtcars))]  = NA
# non funziona questo... neach la ari sa perché
superheat(mtcars.missing, scale = T, heat.na.col = "red")
vis_miss(airquality)
gg_miss_upset(airquality)
library(ggplo2)
ggplot(airquality, aes(x = Ozone, y = Solar.R)) +
geom_point()
library(heatmaply)
library(superheat)
library(naniar)
library(ggplo2)
vis_miss(airquality)
gg_miss_upset(airquality)
ggplot(airquality, aes(x = Ozone, y = Solar.R)) +
geom_point()
library(heatmaply)
library(superheat)
library(naniar)
library(ggplo2)
library(naniar)
library(ggplot2)
vis_miss(airquality)
gg_miss_upset(airquality)
ggplot(airquality, aes(x = Ozone, y = Solar.R)) +
geom_point()
ggplot(airquality, aes(x = Ozone, y = Solar.R)) +
geom_point()
ggplot(airquality, aes(x = Ozone, y = Solar.R)) +
geom_miss_point()
ggplot(airquality, aes(x = Ozone, y = Solar.R)) +
geom_miss_point() +
facet_wrap(~ Month)
gg_miss_var(airquality)
gg_miss_var(airquality, show_pct = 1)
gg_miss_var(airquality, facet = Month)
gg_miss_case(airquality)
gg_miss_case(airquality, facet = Month)
gg_miss_fct(x = riskfactors, fct = marital)
gg_miss_fct(oceanbuoys, year)
miss_var_span(pedestrian, hourly_counts, span_every = 3000)
gg_miss_span(pedestrian, hourly_counts, span_every = 3000)
gg_miss_span(pedestrian, hourly_counts, span_every = 3000, facet = sensor_name)
gg_miss_case_cumsum(airquality)
gg_miss_which(airquality)
stats = data.frame(player = c("A", "B", "C", "D"),
runs=c(100,200,408, NA),
wickets=c(17,20,NA,5))
print(paste("Position of missing values:", which(is.na(stats))))
print(paste("Counts of total missing values:", sum(is.na(stats))))
library(mice)
library(VIM)
install.packages("mice")
install.packages("VIM")
library(mice)
library(VIM)
p = function(x){sum(is.na(x))/length(x) * 100}
apply(data, 2, p)
p = function(x){sum(is.na(x))/length(x) * 100}
apply(data, 2, p)
apply(data, 2, p)
data = airquality
p = function(x){sum(is.na(x))/length(x) * 100}
apply(data, 2, p)
md.pattern(data)
df1 = data.frame(
A1 = c(NA, 10, NA, 7, 8, 11, 20),
A2 = c(1, 2, 5, 6, 88, 54, 6),
A3 = c(1, 0, NA, 1, 1, NA, 3)
)
result = na.omit(df)
result = df1[complete.cases(df1),]
df = data.frame (team = c("A", "B", "C", "D", "E"),
points = c(99, NA, NA, 88, 95),
assistes = c(33, 28, 31, 39, 34),
rebounds = c(30, 28, 24, 24, nA))
df = data.frame (team = c("A", "B", "C", "D", "E"),
points = c(99, NA, NA, 88, 95),
assistes = c(33, 28, 31, 39, 34),
rebounds = c(30, 28, 24, 24, NA))
newDf = df[, colSums(is.na(df)) ==0]
newDf = df %>% select_if(~ !any(is.na(.,)))
newDf = df %>% select_if(~ !any(is.na(.)))
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidymodels")
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(lubridate)
library(ranger)
library(vip)
data <- read_csv("dataset.csv")
data
sum(is.na(data))
data <- data %>%
mutate(time = as.Date(time)) %>%
group_by(time) %>%
summarise_all(mean)
data
sum(is.na(data))
data <- data %>%
select(-is_Day, -time)
data
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidymodels")
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(lubridate)
library(ranger)
library(vip)
data <- read_csv("dataset.csv")
data
sum(is.na(data))
data <- data %>%
mutate(time = as.Date(time)) %>%
group_by(time) %>%
summarise_all(mean)
install.packages("tidymodels")
data
sum(is.na(data))
summary(data)
data <- data %>%
select(-is_Day, -time)
data
data <- data %>%
mutate(willTomorrowRain = ifelse(lead(`rain (mm)`) > 0, 1, 0))
data$Rain <- as.factor(data$Rain)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidymodels")
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(lubridate)
library(ranger)
library(vip)
data <- read_csv("dataset.csv")
data
sum(is.na(data))
data <- data %>%
mutate(time = as.Date(time)) %>%
group_by(time) %>%
summarise_all(mean)
data
sum(is.na(data))
summary(data)
data <- data %>%
select(-is_Day, -time)
data
data <- data %>%
mutate(willTomorrowRain = ifelse(lead(`rain (mm)`) > 0, 1, 0))
data$Rain <- as.factor(data$Rain)
set.seed(0)
train_index <- sample(1:nrow(data), 0.8 * nrow(data))
train <- data[train_index, ]
test <- data[-train_index, ]
tune_rf_spec <- rand_forest(
mtry = 15,
trees = 2000,
mode = "classification"
) %>%
set_engine("ranger", importance = "impurity")
# Create a recipe for preprocessing
rain_rf_recipe <- recipe(willTomorrowRain ~ ., data = train) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
# Create a workflow to combine the model and the recipe
rf_workflow <- workflow() %>%
add_model(tune_rf_spec) %>%
add_recipe(rain_rf_recipe)
rf_fit <- fit(rf_workflow, data = train)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(lubridate)
library(ranger)
library(vip)
data <- read_csv("dataset.csv")
data
sum(is.na(data))
data <- data %>%
mutate(time = as.Date(time)) %>%
group_by(time) %>%
summarise_all(mean)
data
sum(is.na(data))
summary(data)
data <- data %>%
select(-is_Day, -time)
data
data <- data %>%
mutate(willTomorrowRain = ifelse(lead(`rain (mm)`) > 0, 1, 0))
data$Rain <- as.factor(data$Rain)
data$Rain <- as.factor(data$willTomorrowRain)
data
data %>%
ggplot(aes(x = willTomorrowRain)) +
geom_bar()
data %>%
select(-time, -willTomorrowRain) %>%
gather(key = "feature", value = "value") %>%
ggplot(aes(x = value)) +
geom_density() +
facet_wrap(~feature, scales = "free")
data %>%
select(-willTomorrowRain) %>%
gather(key = "feature", value = "value") %>%
ggplot(aes(x = value)) +
geom_density() +
facet_wrap(~feature, scales = "free")
